apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

android {
    compileSdkVersion sdk_versions.compile_sdk
    defaultConfig {
        minSdkVersion sdk_versions.min_sdk
        targetSdkVersion sdk_versions.target_sdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // need to specify this to prevent junit runner from going deep into our dependencies
        testInstrumentationRunnerArguments = ['package': 'com.google.android.fhir']
        // Required when setting minSdkVersion to 20 or lower
        // See https://developer.android.com/studio/write/java8-support
        multiDexEnabled true
    }
    sourceSets {
        // shared code between junit and instrumentation tests
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
        test {
            resources.srcDirs += ['sampledata']
        }
        androidTest {
            resources.srcDirs += ['sampledata']
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled false
        }
    }
    compileOptions {
        // Flag to enable support for the new language APIs
        // See https://developer.android.com/studio/write/java8-support
        coreLibraryDesugaringEnabled true
        // Sets Java compatibility to Java 8
        // See https://developer.android.com/studio/write/java8-support
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/ASL-2.0.txt'
        exclude 'META-INF/LGPL-3.0.txt'
    }
    // See https://developer.android.com/studio/write/java8-support
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

configurations {
    all {
        exclude module: 'json'
        exclude module: 'xpp3'
        exclude module: 'hamcrest-all'
        exclude module: 'jaxb-impl'
        exclude module: 'jaxb-core'
        exclude module: 'jakarta.activation-api'
        exclude module: 'javax.activation'
        exclude module: 'jakarta.xml.bind-api'
        // TODO: the following line can be removed from the next CQL engine release.
        exclude module: 'hapi-fhir-jpaserver-base'
    }
}

dependencies {
    androidTestImplementation deps.atsl.core
    androidTestImplementation deps.atsl.ext_junit_ktx
    androidTestImplementation deps.atsl.runner
    androidTestImplementation deps.junit
    androidTestImplementation deps.truth

    api deps.cql_engine.core
    api (deps.hapi_r4) {
        exclude module: 'junit'
    }

    coreLibraryDesugaring deps.desugar

    implementation deps.cql_engine.fhir
    implementation deps.guava
    implementation deps.kotlin.stdlib
    implementation deps.room.ktx
    implementation deps.room.runtime
    implementation deps.work.runtime
    implementation deps.json_tools.json_patch

    kapt deps.room.compiler

    testImplementation deps.atsl.core
    testImplementation deps.junit
    testImplementation deps.robolectric
    testImplementation deps.truth
}

jacoco {
    toolVersion = versions.jacoco
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

// TODO: Review after https://issuetracker.google.com/178015739 is fixed
tasks.withType(Test.class).configureEach {
    jacoco {
        excludes = ["*"]
    }
}

// Files with such regex patterns are to be excluded
def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*',
                  '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']

// Location of generated output classes
def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug",
        excludes: fileFilter)

// Source code directory
def mainSrc = "$project.projectDir/src/main/java"

// Task definition
task jacocoTestReport(type: JacocoReport) {
    // Runs only after the dependencies are executed
    dependsOn = ['testDebugUnitTest']
    // Export formats
    reports {
        xml.enabled = true
        html.enabled = true
    }

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))

    // Inform Gradle where the files generated by test cases - are located
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/*.ec'
    ])
}